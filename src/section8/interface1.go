package main

import "fmt"

type test interface {
}

func main() {
	// 인터페이스
	// 객체의 동작을 표현, 골격
	// 단순히 동작에 대한 방법만 표시
	// 추상화 제공
	// 인터페이스의 메서드를 구현한 타입
	// Go언어를 유용하게 사용
	// 덕타이핑: Go언어의 독창적인 특성
	// 인터페이스 -> 자바(전략 패턴, 템플릿메서드 패턴, 팩토리메서드 패턴, 어댑터패턴 ...)
	// 디자인 패턴 측면에서 Client 입장 -> 메서드의 구체적인 클래스를 몰라도 인터페이스 정의된 메서드를 사용하는 객체 보장
	// -> 클래스 간 결합도 감소 -> 유지보수 용이성, 기능 추가 용이성 -> 독립적인 프로그래밍 가능
	/*
		type 인터페이스명 interface {
			메서드1() 반환값(타입형)
			메서드2() // 반환값 없을 경우
		}
	*/
	var t test
	fmt.Println("t : ", t) // 빈 인터페이스인 경우 Nil이 리턴
}
